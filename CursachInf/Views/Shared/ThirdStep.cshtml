@{

    Layout = null;

}
@using CursachInf.Models.ViewComponents
@using CursachInf.Domain.Entities
@model Fisher
@{
    var XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.DataPoints1);
    var YValues = Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.DataPoints2);
    ViewData["Title"] = "Line Chart";
   

}
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>График полученного уравнения</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/js/bootstrap.bundle.min.js"></script>

    @*<link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet">*@
</head>
<body>

    <div class="box-body">

        <div class="chart-container">
            <canvas id="chart" style="width:100%; height:500px"></canvas>
        </div>
    </div>



    <form align="center" asp-asp-controller="Home">

        <button type="button" class="btn btn-primary" id="save-btn">Сохранить график</button>
        <input type="submit" class="btn btn-info" asp-action="Excel" value="Export .xlsx" />
        <input type="submit" class="btn btn-success" asp-action="Json" value="Export .json" />
        <input type="submit" class="btn btn-dark" asp-action="SecondStep" value="Предыдущий этап" />
        <input type="submit" class="btn btn-secondary" asp-action="Index" value="На главную" />
        <br>
        <details title="Расчёты" class="dropdown">
            Расчитанные величины и их значения
            <div class="table-responsive">
                <table class="table table-striped table-hover table-bordered text-center">
                    <thead>
                        <tr>
                            <th scope="col" class="table-dark">
                                @Html.DisplayNameFor(model => model.n)
                            </th>

                            <th scope="col" class="table-dark">
                                @Html.DisplayNameFor(model => model.m)
                            </th>

                            <th scope="col" class="table-dark">
                                @Html.DisplayNameFor(model => model.alpha)
                            </th>
                            <th scope="col" class="table-dark">
                                @Html.DisplayNameFor(model => model.v1)
                            </th>
                            <th scope="col" class="table-dark">
                                @Html.DisplayNameFor(model => model.v2)
                            </th>
                            <th scope="col" class="table-dark">
                                σ<sup>2</sup>fact
                            </th>
                            <th scope="col" class="table-dark">
                                σ<sup>2</sup>ost
                            </th>
                            <th scope="col" class="table-dark">
                                Уравнение регрессии
                            </th>
                            <th scope="col" class="table-dark">
                                F<sub>табл</sub>
                            </th>
                            <th scope="col" class="table-dark">
                                F<sub>расч</sub>
                            </th>
                            <th scope="col" class="table-dark">
                                @Html.DisplayNameFor(model => model.output)
                            </th>
                            <th scope="col" class="table-dark">
                                @Html.DisplayNameFor(model => model.type)
                            </th>
                        </tr>
                    </thead>
                    <tbody>

                        <tr class="tab-content">
                            <td>
                                @Html.DisplayFor(modelItem => modelItem.n)
                            </td>

                            <td>
                                @Html.DisplayFor(modelItem => modelItem.m)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => modelItem.alpha)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => modelItem.v1)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => modelItem.v2)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => modelItem.sigmaFact)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => modelItem.sigmaOst)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => modelItem.уx)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => modelItem.F_table)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => modelItem.F_calc)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => modelItem.output)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => modelItem.type)
                            </td>
                        </tr>


                    </tbody>
                </table>
            </div>
        </details>

    </form>

</body>
</html>
@await Html.PartialAsync("ScriptsPartial")

<script type="text/javascript">



        $(function () {
    var chartName = "chart";
        var ctx = document.getElementById(chartName).getContext('2d');
        var data = {
                labels: @Html.Raw(XLabels),
                datasets: [{
                    label: "График уравнения",
                    fill: false,
                    backgroundColor: [
                        'rgba(94, 6, 254,0.2)',
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)',
                        'rgba(255, 0, 0)',
                        'rgba(0, 255, 0)',
                        'rgba(0, 0, 255)',
                        'rgba(192, 192, 192)',
                        'rgba(255, 255, 0)',
                        'rgba(255, 0, 255)'
                    ],
                    borderColor: [
                        'rgb(24, 14, 159)'
                        @*'rgb(75, 192, 192)'*@
                    ],

                    borderWidth: 2,
                    data: @Html.Raw(YValues)
    }]
            };

var options = {
                maintainAspectRatio: false,
                scales: {
                    yAxes: [{
                        ticks: {
                            min: 0,
                            beginAtZero: true
                        },
                        gridLines: {
                            display: true,
                            color: "rgba(255,99,164,0.2)"
                        }
}],
                    xAxes: [{
                        ticks: {
                            min: 0,
                            beginAtZero: true
                        },
                        gridLines: {
                            display: false
                        }
                    }]
                }
            };

       var myChart = new  Chart(ctx, {
                options: options,
                data: data,
                type:'line'

       });

        });



    $("#save-btn").click(function () {
        $("#chart").get(0).toBlob(function (blob) {
            saveAs(blob, "regress_chart");
        });
    });

</script>  