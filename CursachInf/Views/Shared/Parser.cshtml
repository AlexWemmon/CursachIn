@{

    Layout = null;

}
@using CursachInf.Models.ViewComponents
@using CursachInf.Domain.Entities
@model IEnumerable<Koefficient>
@{
    var XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.DataPoints1);
    var YValues = Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.DataPoints2);
    ViewData["Title"] = "Line Chart";
    int count = 0;
    
}
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>График по взятым из файла данным</title>
    <link href="https://cdn.datatables.net/1.10.20/css/dataTables.bootstrap4.min.css" rel="stylesheet" />
</head>
<body>

    <div class="box-body">

        <div class="chart-container">
            <canvas id="chart" style="width:100%; height:500px"></canvas>
        </div>
    </div>


   
    <form align="center" asp-asp-controller="Home">
        <input type="submit" value="Проверить на значимость" />
        <button type="button" class="btn btn-primary" id="save-btn">Сохранить график</button>
        <input type="submit" asp-action="Excel" value="Export .xlsx" />
        <input type="submit" asp-action="SecondStep" value="Второй этап" />
        <details title="Расчёты">
            Расчитанные величины и их значения
            <div id="Event">
                <table class="table" border="1" align="center">
                    <thead>
                        <tr>
                            <th align="center">
                                @Html.DisplayNameFor(model => model.X)
                            </th>

                            <th align="center">
                                @Html.DisplayNameFor(model => model.Y)
                            </th>

                            <th align="center">
                                x<sup>2</sup>
                            </th>
                            <th align="center">
                                y<sup>2</sup>
                            </th>
                            <th align="center">
                                @Html.DisplayNameFor(model => model.XmultY)
                            </th>
                            <th align="center">
                                Σx
                            </th>
                            <th align="center">
                                Σy
                            </th>
                            <th align="center">
                                Σx<sup>2</sup>
                            </th>
                            <th align="center">
                                Σy<sup>2</sup>
                            </th>
                            <th align="center">
                                Σxy
                            </th>
                            <th align="center">
                                Среднее величина x
                            </th>
                            <th align="center">
                                Среднее величина y
                            </th>
                            <th align="center">
                                Среднее величина x<sup>2</sup>
                            </th>
                            <th align="center">
                                Среднее величина y<sup>2</sup>
                            </th>
                            <th align="center">
                                Среднее величина xy
                            </th>
                            <th align="center">
                                @Html.DisplayNameFor(model => model.r)
                            </th>
                            <th align="center">
                                @Html.DisplayNameFor(model => model.Connection)
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td align="center">
                                    @Html.DisplayFor(modelItem => item.X)
                                </td>

                                <td align="center">
                                    @Html.DisplayFor(modelItem => item.Y)
                                </td>
                                <td align="center">
                                    @Html.DisplayFor(modelItem => item.SquareX)
                                </td>
                                <td align="center">
                                    @Html.DisplayFor(modelItem => item.SquareY)
                                </td>
                                <td align="center">
                                    @Html.DisplayFor(modelItem => item.XmultY)
                                </td>




                                @{ if (count == 0)
                                    {

                                        <td align="center">
                                            @Html.DisplayFor(modelItem => item.SumX)
                                        </td>
                                        <td align="center">
                                            @Html.DisplayFor(modelItem => item.SumY)
                                        </td>
                                        <td align="center">
                                            @Html.DisplayFor(modelItem => item.SumSqrX)
                                        </td>
                                        <td align="center">
                                            @Html.DisplayFor(modelItem => item.SumSqrY)
                                        </td>
                                        <td align="center">
                                            @Html.DisplayFor(modelItem => item.SumXmultY)
                                        </td>
                                        <td align="center">
                                            @Html.DisplayFor(modelItem => item.AvgX)
                                        </td>
                                        <td align="center">
                                            @Html.DisplayFor(modelItem => item.AvgY)
                                        </td>
                                        <td align="center">
                                            @Html.DisplayFor(modelItem => item.AvgSqrX)
                                        </td>
                                        <td align="center">
                                            @Html.DisplayFor(modelItem => item.AvgSqrY)
                                        </td>
                                        <td align="center">
                                            @Html.DisplayFor(modelItem => item.AvgXmultY)
                                        </td>

                                        <td align="center">
                                            @Html.DisplayFor(modelItem => item.r)
                                        </td>
                                        <td align="center">
                                            @Html.DisplayFor(modelItem => item.Connection)
                                        </td>
                                        count++;
                                    }
                                }
                            </tr>

                        }
                    </tbody>
                </table>
            </div>
        </details>

    </form>

</body>
</html>
@await Html.PartialAsync("ScriptsPartial")
<script type="text/javascript" src="~/js/libs/tableExport.js"></script>
<script type="text/javascript" src="~/js/libs/html2canvas/html2canvas.min.js"></script>
<script type="text/javascript" src="http://code.jquery.com/jquery-latest.min.js"></script>
<script type="text/javascript" src="~/js/libs/js-xlsx/xlsx.core.min.js"></script>
<script type="text/javascript">



        $(function () {
    var chartName = "chart";
        var ctx = document.getElementById(chartName).getContext('2d');
        var data = {
                labels: @Html.Raw(XLabels),
                datasets: [{
                    label: "График по файлу",
                    fill: false,
                    backgroundColor: [
                        'rgba(94, 6, 254,0.2)',
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)',
                        'rgba(255, 0, 0)',
                        'rgba(0, 255, 0)',
                        'rgba(0, 0, 255)',
                        'rgba(192, 192, 192)',
                        'rgba(255, 255, 0)',
                        'rgba(255, 0, 255)'
                    ],
                    borderColor: [
                        'rgb(24, 14, 159)'
                        @*'rgb(75, 192, 192)'*@
                    ],

                    borderWidth: 2,
                    data: @Html.Raw(YValues)
    }]
            };

var options = {
                maintainAspectRatio: false,
                scales: {
                    yAxes: [{
                        ticks: {
                            min: 0,
                            beginAtZero: true
                        },
                        gridLines: {
                            display: true,
                            color: "rgba(255,99,164,0.2)"
                        }
}],
                    xAxes: [{
                        ticks: {
                            min: 0,
                            beginAtZero: true
                        },
                        gridLines: {
                            display: false
                        }
                    }]
                }
            };

       var myChart = new  Chart(ctx, {
                options: options,
                data: data,
                type:'line'

       });

        });



    $("#save-btn").click(function () {
        $("#chart").get(0).toBlob(function (blob) {
            saveAs(blob, "downloaded_chart");
        });
    });
   
</script>  